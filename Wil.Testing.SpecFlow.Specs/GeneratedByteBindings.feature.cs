// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Wil.Testing.SpecFlow.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class GeneratedByteBindingsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GeneratedByteBindings.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Generated Byte Bindings", "\tIn order to quickly create SpecFlow unit tests\r\n\tAs a user\r\n\tI want use generate" +
                    "d bindings", ProgrammingLanguage.CSharp, new string[] {
                        "dynamicBindings"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Generated Byte Bindings")))
            {
                global::Wil.Testing.SpecFlow.Specs.GeneratedByteBindingsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Null checks")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Generated Byte Bindings")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("dynamicBindings")]
        public virtual void NullChecks()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Null checks", ((string[])(null)));
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
  testRunner.Given("null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
  testRunner.Given("actual is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 11
  testRunner.Given("other null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 12
  testRunner.Given("null as the goal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 13
  testRunner.Given("expected is null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 14
  testRunner.Given("instance as 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 15
  testRunner.Given("a null array of byte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 16
  testRunner.Given("a null enumerable of byte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 17
  testRunner.Given("a null ICollection of byte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 18
  testRunner.Given("a null IList of byte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 19
  testRunner.Given("a null IReadOnlyCollection of byte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 20
  testRunner.Given("a null IReadOnlyList of byte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 21
  testRunner.Given("a null list of byte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 22
  testRunner.Then("actual should be expected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 23
  testRunner.Then("actual should be equal to other", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 24
  testRunner.Then("actual should be goal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 25
  testRunner.Then("actual should be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 26
  testRunner.Then("the result should be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 27
  testRunner.Then("instance should not be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 28
  testRunner.Then("the result should be a null array of byte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 29
  testRunner.Then("the result should be a null enumerable of byte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 30
  testRunner.Then("the result should be a null ICollection of byte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 31
  testRunner.Then("the result should be a null IList of byte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 32
  testRunner.Then("the result should be a null IReadOnlyCollection of byte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 33
  testRunner.Then("the result should be a null IReadonlyList of byte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 34
  testRunner.Then("the result should be a null list of byte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 35
  testRunner.Given("collection is a list of 1, 2, 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 36
  testRunner.Given("an array of byte 1, 2, 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 37
  testRunner.Given("an enumerable of byte 1, 2, 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 38
  testRunner.Given("an ICollection of byte 1, 2, 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 39
  testRunner.Given("an IList of byte 1, 2, 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 40
  testRunner.Given("an IReadOnlyCollection of byte 1, 2, 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 41
  testRunner.Given("an IReadOnlyList of byte 1, 2, 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 42
  testRunner.Given("a list of byte 1, 2, 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 43
  testRunner.Then("collection should not be null", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 44
  testRunner.Then("the result should not be a null array of byte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 45
  testRunner.Then("the result should not be a null enumerable of byte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 46
  testRunner.Then("the result should not be a null ICollection of byte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 47
  testRunner.Then("the result should not be a null IList of byte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 48
  testRunner.Then("the result should not be a null IReadOnlyCollection of byte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 49
  testRunner.Then("the result should not be a null IReadonlyList of byte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 50
  testRunner.Then("the result should not be a null list of byte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Name, name")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Generated Byte Bindings")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("dynamicBindings")]
        public virtual void NameName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Name, name", ((string[])(null)));
#line 53
this.ScenarioSetup(scenarioInfo);
#line 54
  testRunner.Given("actual is byte 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 55
  testRunner.Given("expected as byte 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 56
  testRunner.Given("byte 10 as the target", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 57
  testRunner.Given("extraSmall is byte: 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 58
  testRunner.Given("byte 5 as small", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 59
  testRunner.Given("large 100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 60
  testRunner.Given("extraLarge: 255", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 61
  testRunner.Given("the temp is 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 62
  testRunner.Then("actual should be expected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 63
  testRunner.Then("actual should be equal to expected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 64
  testRunner.Then("actual should equal expected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 65
  testRunner.Then("the actual should equal expected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 66
  testRunner.Then("actual should be equivalent to expected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 67
  testRunner.Then("actual should be greater than small", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 68
  testRunner.Then("actual should be less than large", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 69
  testRunner.Then("actual should be greater than or equal to target", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 70
  testRunner.Then("actual should be greater than or equal target", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 71
  testRunner.Then("actual should be greater or equal to small", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 72
  testRunner.Then("actual should be greater or equal small", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 73
  testRunner.Then("actual should be less than or equal to target", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 74
  testRunner.Then("actual should be less than or equal target", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 75
  testRunner.Then("actual should be less or equal to large", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 76
  testRunner.Then("actual should be less or equal large", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 77
  testRunner.Then("actual should not be extraSmall", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 78
  testRunner.Then("actual should not be equal to small", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 79
  testRunner.Then("actual should not equal small", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 80
  testRunner.Then("actual should match expected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 81
  testRunner.Then("the actual should not equal extraSmall", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 82
  testRunner.Then("actual should not be equivalent to small", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 83
  testRunner.Then("actual should not be greater than or equal to large", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 84
  testRunner.Then("actual should not be greater than or equal large", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 85
  testRunner.Then("actual should not be greater or equal to large", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 86
  testRunner.Then("actual should not be greater or equal extraLarge", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 87
  testRunner.Then("actual should not be less than or equal to extraSmall", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 88
  testRunner.Then("actual should not be less than or equal extraSmall", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 89
  testRunner.Then("actual should not be less or equal to small", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 90
  testRunner.Then("actual should not be less or equal small", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 91
  testRunner.Then("actual should not match small", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 92
  testRunner.Given("actual is enumerable of byte 1, 2, 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 93
  testRunner.Given("expectedArray is array of bytes \"1, 2, 3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 94
  testRunner.Given("expectedEnumerable as enumerable of bytes \'1, 2, 3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 95
  testRunner.Given("expectedCollection is an ICollection of bytes: 1, 2, 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 96
  testRunner.Given("expectedIList is an IList of bytes: 1, 2, 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 97
  testRunner.Given("expectedReadOnlyCollection is an IReadOnlyCollection of bytes: 1, 2, 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 98
  testRunner.Given("expectedReadOnlyList is an IReadOnlyList of bytes: 1, 2, 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 99
  testRunner.Given("the expectedList as a list of bytes: 1, 2, 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 100
  testRunner.Given("list of bytes \"1\", \"3\" as subset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 101
  testRunner.Given("an ICollection of bytes \'5\', \'6\', \'7\' as other", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 102
  testRunner.Given("the scrambled as IList of bytes \'2\', \'3\', \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 103
  testRunner.Then("actual should be expectedEnumerable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 104
  testRunner.Then("actual should be equal to expectedArray", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 105
  testRunner.Then("actual should equal expectedCollection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 106
  testRunner.Then("actual should equal expectedIList", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 107
  testRunner.Then("actual should equal expectedReadOnlyCollection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 108
  testRunner.Then("actual should equal expectedReadOnlyList", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 109
  testRunner.Then("the actual should equal expectedList", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 110
  testRunner.Then("actual should be equivalent to scrambled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 111
  testRunner.Then("actual should contain subset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 112
  testRunner.Then("actual should not be other", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 113
  testRunner.Then("actual should not be equal to other", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 114
  testRunner.Then("actual should not equal other", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 115
  testRunner.Then("the actual should not equal other", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 116
  testRunner.Then("actual should not be equivalent to other", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 117
  testRunner.Then("actual should not contain other", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Name, value")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Generated Byte Bindings")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("dynamicBindings")]
        public virtual void NameValue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Name, value", ((string[])(null)));
#line 120
this.ScenarioSetup(scenarioInfo);
#line 121
  testRunner.Given("actual is byte 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 122
  testRunner.Then("actual should be 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 123
  testRunner.Then("actual should be equal to 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 124
  testRunner.Then("actual should be equal to byte 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 125
  testRunner.Then("actual should equal 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 126
  testRunner.Then("the actual should equal 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 127
  testRunner.Then("actual should be equivalent to 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 128
  testRunner.Then("actual should match \"\\d\\d\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 129
  testRunner.Then("actual should be greater than 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 130
  testRunner.Then("actual should be less than 100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 131
  testRunner.Then("actual should be greater than or equal to 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 132
  testRunner.Then("actual should be greater than or equal 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 133
  testRunner.Then("actual should be greater or equal to 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 134
  testRunner.Then("actual should be greater or equal 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 135
  testRunner.Then("actual should be less than or equal to 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 136
  testRunner.Then("actual should be less than or equal 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 137
  testRunner.Then("actual should be less or equal to 100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 138
  testRunner.Then("actual should be less or equal 100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 139
  testRunner.Then("actual should not be 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 140
  testRunner.Then("actual should not be equal to 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 141
  testRunner.Then("actual should not equal 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 142
  testRunner.Then("the actual should not equal 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 143
  testRunner.Then("actual should not be equivalent to 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 144
  testRunner.Then("actual should not match \"\\d\\d\\d\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 145
  testRunner.Then("actual should not be greater than or equal to 100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 146
  testRunner.Then("actual should not be greater than or equal 100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 147
  testRunner.Then("actual should not be greater or equal to 100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 148
  testRunner.Then("actual should not be greater or equal 100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 149
  testRunner.Then("actual should not be less than or equal to 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 150
  testRunner.Then("actual should not be less than or equal 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 151
  testRunner.Then("actual should not be less or equal to 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 152
  testRunner.Then("actual should not be less or equal 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 153
  testRunner.Given("actual is enumerable of byte 1, 2, 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 154
  testRunner.Given("other is list of bytes \"1\", \"2\", \"3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 155
  testRunner.Then("actual should be enumerable of bytes \'1, 2, 3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 156
  testRunner.Then("other should be equal to array of bytes \"1, 2, 3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 157
  testRunner.Then("actual should equal ICollection of bytes: 1, 2, 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 158
  testRunner.Then("actual should equal an IList of bytes: 1, 2, 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 159
  testRunner.Then("actual should equal an IReadOnlyCollection of bytes: 1, 2, 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 160
  testRunner.Then("actual should equal an IReadOnlyList of bytes: 1, 2, 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 161
  testRunner.Then("the actual should equal list of bytes: 1, 2, 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 162
  testRunner.Then("actual should be equivalent to list of bytes \'2\', \'3\', \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 163
  testRunner.Then("actual should contain list of bytes \"1\", \"3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 164
  testRunner.Then("actual should not be an ICollection of bytes \'5\', \'6\', \'7\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 165
  testRunner.Then("actual should not be equal to an ICollection of bytes: \'5\', \'6\', \'7\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 166
  testRunner.Then("actual should not equal an ICollection of bytes: \'5\', \'6\', \'7\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 167
  testRunner.Then("the actual should not equal ICollection of bytes: \'5\', \'6\', \'7\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 168
  testRunner.Then("actual should not be equivalent to an ICollection of bytes \'5\', \'6\', \'7\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 169
  testRunner.Then("actual should not contain an ICollection of bytes \'5\', \'6\', \'7\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Default, value")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Generated Byte Bindings")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("dynamicBindings")]
        public virtual void DefaultValue()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Default, value", ((string[])(null)));
#line 172
this.ScenarioSetup(scenarioInfo);
#line 173
  testRunner.Given("byte 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 174
  testRunner.Then("result should be byte 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 175
  testRunner.Then("result should be equal to byte 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 176
  testRunner.Then("result should equal byte 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 177
  testRunner.Then("the result should equal byte 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 178
  testRunner.Then("result should be equivalent to byte 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 179
  testRunner.Then("result should match byte 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 180
  testRunner.Then("result should be greater than byte 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 181
  testRunner.Then("result should be less than byte 100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 182
  testRunner.Then("result should be greater than or equal to byte 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 183
  testRunner.Then("result should be greater than or equal byte 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 184
  testRunner.Then("result should be greater or equal to byte 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 185
  testRunner.Then("result should be greater or equal byte 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 186
  testRunner.Then("result should be less than or equal to byte 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 187
  testRunner.Then("result should be less than or equal byte 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 188
  testRunner.Then("result should be less or equal to byte 100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 189
  testRunner.Then("result should be less or equal byte 100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 190
  testRunner.Given("10 as a byte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 191
  testRunner.Then("result should not be byte 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 192
  testRunner.Then("result should not be equal to byte 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 193
  testRunner.Then("result should not equal byte 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 194
  testRunner.Then("the result should not equal byte 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 195
  testRunner.Then("result should not be equivalent to byte 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 196
  testRunner.Then("result should not match byte 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 197
  testRunner.Then("result should not be greater than or equal to byte 100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 198
  testRunner.Then("result should not be greater than or equal byte 100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 199
  testRunner.Then("result should not be greater or equal to byte 100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 200
  testRunner.Then("result should not be greater or equal byte 100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 201
  testRunner.Then("result should not be less than or equal to byte 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 202
  testRunner.Then("result should not be less than or equal byte 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 203
  testRunner.Then("result should not be less or equal to byte 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 204
  testRunner.Then("result should not be less or equal byte 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 205
  testRunner.Given("array of bytes \"1, 2, 3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 206
  testRunner.Given("enumerable of bytes \'1, 2, 3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 207
  testRunner.Given("an ICollection of bytes 1, 2, 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 208
  testRunner.Given("an IList of bytes: 1, 2, 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 209
  testRunner.Given("1, 2, 3 as an IReadOnlyCollection of byte", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 210
  testRunner.Given("\"1\", \"2\", \"3\" as an IReadOnlyList of bytes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 212
  testRunner.Given("bytes \'1\', \'2\', \'3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 213
  testRunner.Then("result should be bytes \"1\", \"2\", \"3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 214
  testRunner.Then("result should be enumerable of bytes \'1, 2, 3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 215
  testRunner.Then("result should be equal to array of bytes \"1, 2, 3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 216
  testRunner.Then("result should equal ICollection of bytes: 1, 2, 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 217
  testRunner.Then("result should equal an IList of bytes: 1, 2, 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 218
  testRunner.Then("result should equal an IReadOnlyCollection of bytes: 1, 2, 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 219
  testRunner.Then("result should equal an IReadOnlyList of bytes: 1, 2, 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 220
  testRunner.Then("the result should equal list of bytes: 1, 2, 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 221
  testRunner.Then("result should be equivalent to list of bytes \'2\', \'3\', \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 222
  testRunner.Then("result should contain list of bytes \"1\", \"3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 223
  testRunner.Then("result should not be an ICollection of bytes \'5\', \'6\', \'7\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 224
  testRunner.Then("result should not be equal to an ICollection of bytes: \'5\', \'6\', \'7\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 225
  testRunner.Then("result should not equal an ICollection of bytes: \'5\', \'6\', \'7\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 226
  testRunner.Then("the result should not equal ICollection of bytes: \'5\', \'6\', \'7\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 227
  testRunner.Then("result should not be equivalent to an ICollection of bytes \'5\', \'6\', \'7\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 228
  testRunner.Then("result should not contain an ICollection of bytes \'5\', \'6\', \'7\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Default, name")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Generated Byte Bindings")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("dynamicBindings")]
        public virtual void DefaultName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Default, name", ((string[])(null)));
#line 231
this.ScenarioSetup(scenarioInfo);
#line 232
  testRunner.Given("byte 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 233
  testRunner.Given("expected is byte 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 234
  testRunner.Given("byte 10 as the target", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 235
  testRunner.Given("extraSmall is byte: 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 236
  testRunner.Given("byte 5 as small", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 237
  testRunner.Given("large as byte 100", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 238
  testRunner.Given("extraLarge is byte: 255", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 239
  testRunner.Then("result should be expected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 240
  testRunner.Then("result should be equal to expected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 241
  testRunner.Then("result should equal expected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 242
  testRunner.Then("the result should equal expected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 243
  testRunner.Then("result should be equivalent to expected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 244
  testRunner.Then("result should match expected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 245
  testRunner.Then("result should be greater than small", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 246
  testRunner.Then("result should be less than large", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 247
  testRunner.Then("result should be greater than or equal to target", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 248
  testRunner.Then("result should be greater than or equal target", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 249
  testRunner.Then("result should be greater or equal to small", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 250
  testRunner.Then("result should be greater or equal small", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 251
  testRunner.Then("result should be less than or equal to target", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 252
  testRunner.Then("result should be less than or equal target", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 253
  testRunner.Then("result should be less or equal to large", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 254
  testRunner.Then("result should be less or equal large", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 255
  testRunner.Then("result should not be extraSmall", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 256
  testRunner.Then("result should not be equal to small", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 257
  testRunner.Then("result should not equal small", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 258
  testRunner.Then("the result should not equal extraSmall", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 259
  testRunner.Then("result should not be equivalent to small", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 260
  testRunner.Then("result should not match small", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 261
  testRunner.Then("result should not be greater than or equal to large", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 262
  testRunner.Then("result should not be greater than or equal large", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 263
  testRunner.Then("result should not be greater or equal to large", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 264
  testRunner.Then("result should not be greater or equal extraLarge", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 265
  testRunner.Then("result should not be less than or equal to extraSmall", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 266
  testRunner.Then("result should not be less than or equal extraSmall", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 267
  testRunner.Then("result should not be less or equal to small", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 268
  testRunner.Then("result should not be less or equal small", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 269
  testRunner.Given("array of bytes \"1, 2, 3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 270
  testRunner.Given("list of bytes \"1\", \"2\", \"3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 271
  testRunner.Given("expectedArray is array of bytes \"1, 2, 3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 272
  testRunner.Given("expectedEnumerable as enumerable of bytes \'1, 2, 3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 273
  testRunner.Given("expectedCollection is an ICollection of bytes: 1, 2, 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 274
  testRunner.Given("expectedIList is an IList of bytes: 1, 2, 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 275
  testRunner.Given("expectedReadOnlyCollection is an IReadOnlyCollection of bytes: 1, 2, 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 276
  testRunner.Given("expectedReadOnlyList is an IReadOnlyList of bytes: 1, 2, 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 277
  testRunner.Given("the expectedList as a list of bytes: 1, 2, 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 278
  testRunner.Given("list of bytes \"1\", \"3\" as subset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 279
  testRunner.Given("an ICollection of bytes \'5\', \'6\', \'7\' as other", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 280
  testRunner.Given("the scrambled as IList of bytes \'2\', \'3\', \'1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 281
  testRunner.Then("result should be expectedEnumerable", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 282
  testRunner.Then("result should be equal to expectedArray", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 283
  testRunner.Then("result should equal expectedCollection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 284
  testRunner.Then("result should equal expectedIList", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 285
  testRunner.Then("result should equal expectedReadOnlyCollection", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 286
  testRunner.Then("result should equal expectedReadOnlyList", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 287
  testRunner.Then("the result should equal expectedList", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 288
  testRunner.Then("result should be equivalent to scrambled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 289
  testRunner.Then("result should contain subset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 290
  testRunner.Then("result should not be other", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 291
  testRunner.Then("result should not be equal to other", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 292
  testRunner.Then("result should not equal other", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 293
  testRunner.Then("the result should not equal other", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 294
  testRunner.Then("result should not be equivalent to other", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 295
  testRunner.Then("result should not contain other", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
